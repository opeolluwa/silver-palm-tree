import{E as i,G as h,H as a,b as r}from"./index.79959ad7.js";const s=i(),u=h("todoStore",{state:()=>({noteEntries:[],noOfRows:10,pageIndex:1,isLoading:!1,isFetchingEntries:!1,errorFetchingNotes:!1,errorMessage:""}),getters:{getAllTodo:t=>t.noteEntries,getNoteById:t=>e=>{var o;return(o=t.noteEntries)==null?void 0:o.filter(n=>n.id===String(e))[0]}},actions:{async fetchAllNotes(){this.isLoading=!0;const t=s.getAuthToken?s.getAuthToken:await a("authorizationToken");try{const{data:e}=await r.get("/notes?page=1&noOfRows=10",{headers:{Authorization:`Bearer ${t}`}});this.noteEntries=e.data.notes,this.noOfRows=e.data.noOfRows,this.pageIndex=e.DataTransfer.CurrentPage,this.isLoading=!1,console.log(JSON.stringify(e))}catch{this.isLoading=!1}},async createNewEntry(t){const e=s.getAuthToken?s.getAuthToken:await a("authorizationToken");this.isLoading=!0;try{const{data:o}=await r.post("/notes",{...t},{headers:{Authorization:`Bearer ${e}`}});return o.success?(this.fetchAllNotes(),this.isLoading=!1,t.title="",t.content="",!0):!1}catch{return this.errorFetchingNotes=!0,this.isLoading=!1,!1}},async deleteNote(t){try{const e=s.getAuthToken?s.getAuthToken:await a("authorizationToken"),{data:o}=await r.delete(`/notes/${t}`,{headers:{Authorization:`Bearer ${e}`}});console.log("the note id is ",t),console.log(JSON.stringify(o))}catch{}},async editNote(t,e){try{const o=s.getAuthToken?s.getAuthToken:await a("authorizationToken"),{data:n}=await r.put(`/notes/${t}`,{...e},{headers:{Authorization:`Bearer ${o}`}});return n.data.success}catch{return!1}}}});export{u};
